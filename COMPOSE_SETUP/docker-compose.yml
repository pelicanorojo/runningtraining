#docker compose --env-file ../.env up -d
#docker compose --env-file ../.env up postgres
#docker compose down --volumes --rmi all --remove-orphans
#docker volume prune -f
#docker system prune -a -f
#docker exec -it  marathon_pg psql -U ${POSTGRES_ADMIN_USER} -d ${APP_DB_NAME}

services:
  postgres:
    image: postgres:15.13-alpine
    container_name: marathon_pg
    # depends_on:
    #   init-sql:
    #     condition: service_completed_successfully
    ports:
      - "5432:5432" 
    volumes:
      - ../.env:/config/.env:ro
      - ${COMPOSE_BASE}:/compose-setup
      - ${POSTGRE_DATA}/easydrop:/var/lib/postgresql/data
      - ${COMPOSE_BASE}/temporal:/docker-entrypoint-initdb.d:ro
      - ${COMPOSE_BASE}/temporal:/temporal
      - ${COMPOSE_BASE}/aux:/aux
    environment:
      POSTGRES_DB: ${APP_DB_NAME}
      APP_SCHEMA_NAME: ${APP_SCHEMA_NAME}
      POSTGRES_USER: ${POSTGRES_ADMIN_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ADMIN_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256  # More secure than md5
    command: ["sh", "/compose-setup/postgre-init.sh"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_ADMIN_USER} -d ${APP_DB_NAME}"]
      interval: 15s
      timeout: 14s
      retries: 2
    #restart: unless-stopped
#volumes:
  # No volumes needed - everything is in host directories now
